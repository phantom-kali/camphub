openapi: 3.0.3
info:
  title: CampHub API
  version: 1.0.0
  description: A comprehensive campus management system API
paths:
  /api/v1/academic/courses/:
    get:
      operationId: academic_courses_list
      description: List courses with filtering and search capabilities
      tags:
      - academic
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CourseList'
          description: ''
  /api/v1/academic/courses/{course_id}/enroll/:
    post:
      operationId: academic_courses_enroll_create
      description: Enroll user in a course
      parameters:
      - in: path
        name: course_id
        schema:
          type: integer
        required: true
      tags:
      - academic
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/academic/courses/{course_id}/enrollments/:
    get:
      operationId: academic_courses_enrollments_list
      description: List enrollments for a course (instructors/TAs only)
      parameters:
      - in: path
        name: course_id
        schema:
          type: integer
        required: true
      tags:
      - academic
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CourseEnrollment'
          description: ''
  /api/v1/academic/courses/{course_id}/study-groups/:
    get:
      operationId: academic_courses_study_groups_list
      description: List study groups for a specific course
      parameters:
      - in: path
        name: course_id
        schema:
          type: integer
        required: true
      tags:
      - academic
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StudyGroupList'
          description: ''
  /api/v1/academic/courses/{course_id}/unenroll/:
    post:
      operationId: academic_courses_unenroll_create
      description: Unenroll user from a course
      parameters:
      - in: path
        name: course_id
        schema:
          type: integer
        required: true
      tags:
      - academic
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/academic/courses/{id}/:
    get:
      operationId: academic_courses_retrieve
      description: Retrieve detailed course information
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - academic
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseDetail'
          description: ''
  /api/v1/academic/courses/create/:
    post:
      operationId: academic_courses_create_create
      description: Create new courses (faculty/staff only)
      tags:
      - academic
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseCreateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CourseCreateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CourseCreateRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseCreate'
          description: ''
  /api/v1/academic/dashboard/:
    get:
      operationId: academic_dashboard_retrieve
      description: Academic dashboard with statistics and recent items
      tags:
      - academic
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/academic/study-groups/:
    get:
      operationId: academic_study_groups_list
      description: List study groups with filtering capabilities
      tags:
      - academic
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StudyGroupList'
          description: ''
  /api/v1/academic/study-groups/{group_id}/join/:
    post:
      operationId: academic_study_groups_join_create
      description: Join a study group
      parameters:
      - in: path
        name: group_id
        schema:
          type: integer
        required: true
      tags:
      - academic
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/academic/study-groups/{group_id}/leave/:
    post:
      operationId: academic_study_groups_leave_create
      description: Leave a study group
      parameters:
      - in: path
        name: group_id
        schema:
          type: integer
        required: true
      tags:
      - academic
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/academic/study-groups/{group_id}/members/:
    get:
      operationId: academic_study_groups_members_list
      description: List members of a study group
      parameters:
      - in: path
        name: group_id
        schema:
          type: integer
        required: true
      tags:
      - academic
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StudyGroupMember'
          description: ''
  /api/v1/academic/study-groups/{id}/:
    get:
      operationId: academic_study_groups_retrieve
      description: Retrieve detailed study group information
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - academic
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudyGroupDetail'
          description: ''
  /api/v1/academic/study-groups/create/:
    post:
      operationId: academic_study_groups_create_create
      description: Create new study groups
      tags:
      - academic
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StudyGroupCreateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/StudyGroupCreateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/StudyGroupCreateRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudyGroupCreate'
          description: ''
  /api/v1/auth/login/:
    post:
      operationId: auth_login_create
      tags:
      - auth
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/v1/auth/logout/:
    post:
      operationId: auth_logout_create
      tags:
      - auth
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/auth/refresh/:
    post:
      operationId: auth_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/v1/auth/register/:
    post:
      operationId: auth_register_create
      tags:
      - auth
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/v1/auth/verify-email/:
    post:
      operationId: auth_verify_email_create
      tags:
      - auth
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /api/v1/community/clubs/:
    get:
      operationId: community_clubs_list
      description: ViewSet for managing clubs
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - community
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ClubList'
          description: ''
    post:
      operationId: community_clubs_create
      description: ViewSet for managing clubs
      tags:
      - community
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClubCreateUpdateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ClubCreateUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ClubCreateUpdateRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClubCreateUpdate'
          description: ''
  /api/v1/community/clubs/{id}/:
    get:
      operationId: community_clubs_retrieve
      description: ViewSet for managing clubs
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - community
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClubDetail'
          description: ''
    put:
      operationId: community_clubs_update
      description: ViewSet for managing clubs
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - community
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClubCreateUpdateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ClubCreateUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ClubCreateUpdateRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClubCreateUpdate'
          description: ''
    patch:
      operationId: community_clubs_partial_update
      description: ViewSet for managing clubs
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - community
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedClubCreateUpdateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedClubCreateUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedClubCreateUpdateRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClubCreateUpdate'
          description: ''
    delete:
      operationId: community_clubs_destroy
      description: ViewSet for managing clubs
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - community
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/community/clubs/{id}/join/:
    post:
      operationId: community_clubs_join_create
      description: Join a club
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - community
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClubDetailRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ClubDetailRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ClubDetailRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClubDetail'
          description: ''
  /api/v1/community/clubs/{id}/leave/:
    delete:
      operationId: community_clubs_leave_destroy
      description: Leave a club
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - community
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/community/clubs/{id}/members/:
    get:
      operationId: community_clubs_members_retrieve
      description: Get list of club members
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - community
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClubDetail'
          description: ''
  /api/v1/community/clubs/{id}/members/{user_id}/:
    put:
      operationId: community_clubs_members_update
      description: Update a member's role in the club
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      - in: path
        name: user_id
        schema:
          type: string
        required: true
      tags:
      - community
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClubDetailRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ClubDetailRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ClubDetailRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClubDetail'
          description: ''
  /api/v1/community/clubs/managing/:
    get:
      operationId: community_clubs_managing_retrieve
      description: Get clubs where user is an officer or president
      tags:
      - community
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClubDetail'
          description: ''
  /api/v1/community/clubs/my_clubs/:
    get:
      operationId: community_clubs_my_clubs_retrieve
      description: Get clubs where user is a member
      tags:
      - community
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClubDetail'
          description: ''
  /api/v1/community/events/:
    get:
      operationId: community_events_list
      description: ViewSet for managing events
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - community
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventList'
          description: ''
    post:
      operationId: community_events_create
      description: ViewSet for managing events
      tags:
      - community
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventCreateUpdateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EventCreateUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EventCreateUpdateRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventCreateUpdate'
          description: ''
  /api/v1/community/events/{id}/:
    get:
      operationId: community_events_retrieve
      description: ViewSet for managing events
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - community
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventDetail'
          description: ''
    put:
      operationId: community_events_update
      description: ViewSet for managing events
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - community
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventCreateUpdateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EventCreateUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EventCreateUpdateRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventCreateUpdate'
          description: ''
    patch:
      operationId: community_events_partial_update
      description: ViewSet for managing events
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - community
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedEventCreateUpdateRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedEventCreateUpdateRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedEventCreateUpdateRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventCreateUpdate'
          description: ''
    delete:
      operationId: community_events_destroy
      description: ViewSet for managing events
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - community
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/community/events/{id}/attend/:
    put:
      operationId: community_events_attend_update
      description: Update user's attendance status for an event
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - community
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventDetailRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EventDetailRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EventDetailRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventDetail'
          description: ''
  /api/v1/community/events/{id}/attendees/:
    get:
      operationId: community_events_attendees_retrieve
      description: Get list of event attendees
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - community
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventDetail'
          description: ''
  /api/v1/community/events/attending/:
    get:
      operationId: community_events_attending_retrieve
      description: Get events user is attending or interested in
      tags:
      - community
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventDetail'
          description: ''
  /api/v1/community/events/my_events/:
    get:
      operationId: community_events_my_events_retrieve
      description: Get events organized by current user
      tags:
      - community
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventDetail'
          description: ''
  /api/v1/messaging/conversations/:
    get:
      operationId: messaging_conversations_retrieve
      description: List all conversations for the authenticated user
      tags:
      - messaging
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/messaging/group-chats/:
    get:
      operationId: messaging_group_chats_list
      description: List group chats and create new ones
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      tags:
      - messaging
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedGroupChatList'
          description: ''
    post:
      operationId: messaging_group_chats_create
      description: List group chats and create new ones
      tags:
      - messaging
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupChatRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/GroupChatRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/GroupChatRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupChat'
          description: ''
  /api/v1/messaging/group-chats/{chat_id}/join/:
    post:
      operationId: messaging_group_chats_join_create
      description: Join a public group chat
      parameters:
      - in: path
        name: chat_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - messaging
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/messaging/group-chats/{chat_id}/leave/:
    post:
      operationId: messaging_group_chats_leave_create
      description: Leave a group chat
      parameters:
      - in: path
        name: chat_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - messaging
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/messaging/group-chats/{chat_id}/members/:
    post:
      operationId: messaging_group_chats_members_create
      description: Add a member to the group chat
      parameters:
      - in: path
        name: chat_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - messaging
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: messaging_group_chats_members_destroy
      description: Remove a member from the group chat
      parameters:
      - in: path
        name: chat_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - messaging
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/messaging/group-chats/{chat_id}/messages/:
    get:
      operationId: messaging_group_chats_messages_list
      description: List and create messages in a group chat
      parameters:
      - in: path
        name: chat_id
        schema:
          type: string
          format: uuid
        required: true
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      tags:
      - messaging
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedGroupMessageList'
          description: ''
    post:
      operationId: messaging_group_chats_messages_create
      description: List and create messages in a group chat
      parameters:
      - in: path
        name: chat_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - messaging
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupMessageRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/GroupMessageRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/GroupMessageRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupMessage'
          description: ''
  /api/v1/messaging/group-chats/{id}/:
    get:
      operationId: messaging_group_chats_retrieve
      description: Retrieve, update, or delete a group chat
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - messaging
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupChat'
          description: ''
    put:
      operationId: messaging_group_chats_update
      description: Retrieve, update, or delete a group chat
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - messaging
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupChatRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/GroupChatRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/GroupChatRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupChat'
          description: ''
    patch:
      operationId: messaging_group_chats_partial_update
      description: Retrieve, update, or delete a group chat
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - messaging
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedGroupChatRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedGroupChatRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedGroupChatRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupChat'
          description: ''
    delete:
      operationId: messaging_group_chats_destroy
      description: Retrieve, update, or delete a group chat
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - messaging
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/messaging/group-messages/{id}/:
    get:
      operationId: messaging_group_messages_retrieve
      description: Retrieve, update, or delete a group message
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - messaging
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupMessage'
          description: ''
    put:
      operationId: messaging_group_messages_update
      description: Retrieve, update, or delete a group message
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - messaging
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupMessageRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/GroupMessageRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/GroupMessageRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupMessage'
          description: ''
    patch:
      operationId: messaging_group_messages_partial_update
      description: Retrieve, update, or delete a group message
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - messaging
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedGroupMessageRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedGroupMessageRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedGroupMessageRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupMessage'
          description: ''
    delete:
      operationId: messaging_group_messages_destroy
      description: Retrieve, update, or delete a group message
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - messaging
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/messaging/messages/:
    get:
      operationId: messaging_messages_list
      description: List direct messages for a conversation and create new messages
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      tags:
      - messaging
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedDirectMessageList'
          description: ''
    post:
      operationId: messaging_messages_create
      description: List direct messages for a conversation and create new messages
      tags:
      - messaging
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DirectMessageRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/DirectMessageRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DirectMessageRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectMessage'
          description: ''
  /api/v1/messaging/messages/{id}/:
    get:
      operationId: messaging_messages_retrieve
      description: Retrieve, update, or delete a direct message
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - messaging
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectMessage'
          description: ''
    put:
      operationId: messaging_messages_update
      description: Retrieve, update, or delete a direct message
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - messaging
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DirectMessageRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/DirectMessageRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DirectMessageRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectMessage'
          description: ''
    patch:
      operationId: messaging_messages_partial_update
      description: Retrieve, update, or delete a direct message
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - messaging
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedDirectMessageRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedDirectMessageRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedDirectMessageRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectMessage'
          description: ''
    delete:
      operationId: messaging_messages_destroy
      description: Retrieve, update, or delete a direct message
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - messaging
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/messaging/messages/mark-read/:
    post:
      operationId: messaging_messages_mark_read_create
      description: Mark direct messages as read
      tags:
      - messaging
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/messaging/notifications/:
    get:
      operationId: messaging_notifications_list
      description: List notifications for the authenticated user
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      tags:
      - messaging
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedNotificationList'
          description: ''
  /api/v1/messaging/notifications/{notification_id}/mark-read/:
    post:
      operationId: messaging_notifications_mark_read_create
      description: Mark specific notifications as read
      parameters:
      - in: path
        name: notification_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - messaging
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/messaging/notifications/{id}/:
    get:
      operationId: messaging_notifications_retrieve
      description: Retrieve and update a notification
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - messaging
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
          description: ''
    put:
      operationId: messaging_notifications_update
      description: Retrieve and update a notification
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - messaging
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/NotificationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NotificationRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
          description: ''
    patch:
      operationId: messaging_notifications_partial_update
      description: Retrieve and update a notification
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - messaging
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedNotificationRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedNotificationRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedNotificationRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
          description: ''
  /api/v1/messaging/notifications/mark-all-read/:
    post:
      operationId: messaging_notifications_mark_all_read_create
      description: Mark all notifications as read for the authenticated user
      tags:
      - messaging
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/messaging/search/users/:
    get:
      operationId: messaging_search_users_retrieve
      description: Search for users to start conversations or add to groups
      tags:
      - messaging
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/messaging/unread-count/:
    get:
      operationId: messaging_unread_count_retrieve
      description: Get unread counts for messages and notifications
      tags:
      - messaging
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/users/{user_id}/:
    get:
      operationId: users_retrieve
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - users
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/users/change-password/:
    put:
      operationId: users_change_password_update
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    patch:
      operationId: users_change_password_partial_update
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedChangePasswordRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedChangePasswordRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedChangePasswordRequest'
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/users/institutions/:
    get:
      operationId: users_institutions_list
      tags:
      - users
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Institution'
          description: ''
  /api/v1/users/profile/:
    get:
      operationId: users_profile_retrieve
      tags:
      - users
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: users_profile_update
      tags:
      - users
      security:
      - jwtAuth: []
      responses:
        '200':
          description: No response body
components:
  schemas:
    Campus:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 200
        address:
          type: string
        coordinates:
          type: string
          readOnly: true
        institution:
          allOf:
          - $ref: '#/components/schemas/Institution'
          readOnly: true
      required:
      - address
      - coordinates
      - id
      - institution
      - name
    CategoryEnum:
      enum:
      - academic
      - social
      - sports
      - cultural
      - professional
      - service
      - hobby
      - religious
      type: string
      description: |-
        * `academic` - Academic
        * `social` - Social
        * `sports` - Sports
        * `cultural` - Cultural
        * `professional` - Professional
        * `service` - Service
        * `hobby` - Hobby
        * `religious` - Religious
    ChangePasswordRequest:
      type: object
      properties:
        old_password:
          type: string
          writeOnly: true
          minLength: 1
        new_password:
          type: string
          writeOnly: true
          minLength: 1
        new_password_confirm:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - new_password
      - new_password_confirm
      - old_password
    ClubCreateUpdate:
      type: object
      description: Serializer for creating and updating clubs
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 200
        description:
          type: string
        institution:
          type: integer
        campus:
          type: integer
          nullable: true
        category:
          $ref: '#/components/schemas/CategoryEnum'
        logo:
          type: string
          format: uri
          nullable: true
        meeting_schedule:
          type: string
          nullable: true
          description: e.g., "Every Tuesday at 7 PM in Room 101"
          maxLength: 500
        contact_email:
          type: string
          format: email
          nullable: true
          maxLength: 254
        max_members:
          type: integer
          maximum: 9223372036854775807
          minimum: 1
          format: int64
          nullable: true
        is_public:
          type: boolean
        is_active:
          type: boolean
      required:
      - description
      - id
      - institution
      - name
    ClubCreateUpdateRequest:
      type: object
      description: Serializer for creating and updating clubs
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 200
        description:
          type: string
          minLength: 1
        institution:
          type: integer
        campus:
          type: integer
          nullable: true
        category:
          $ref: '#/components/schemas/CategoryEnum'
        logo:
          type: string
          format: binary
          nullable: true
        meeting_schedule:
          type: string
          nullable: true
          description: e.g., "Every Tuesday at 7 PM in Room 101"
          maxLength: 500
        contact_email:
          type: string
          format: email
          nullable: true
          maxLength: 254
        max_members:
          type: integer
          maximum: 9223372036854775807
          minimum: 1
          format: int64
          nullable: true
        is_public:
          type: boolean
        is_active:
          type: boolean
      required:
      - description
      - institution
      - name
    ClubDetail:
      type: object
      description: Serializer for club detail view with full information
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 200
        description:
          type: string
        institution:
          type: integer
        campus:
          type: integer
          nullable: true
        category:
          $ref: '#/components/schemas/CategoryEnum'
        president:
          allOf:
          - $ref: '#/components/schemas/UserBasic'
          readOnly: true
        logo:
          type: string
          format: uri
          nullable: true
        meeting_schedule:
          type: string
          nullable: true
          description: e.g., "Every Tuesday at 7 PM in Room 101"
          maxLength: 500
        contact_email:
          type: string
          format: email
          nullable: true
          maxLength: 254
        max_members:
          type: integer
          maximum: 9223372036854775807
          minimum: 1
          format: int64
          nullable: true
        is_public:
          type: boolean
        members_count:
          type: integer
          readOnly: true
        officers_count:
          type: integer
          readOnly: true
        is_full:
          type: boolean
          readOnly: true
        user_membership:
          type: string
          readOnly: true
        can_join:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        is_active:
          type: boolean
        members:
          type: array
          items:
            $ref: '#/components/schemas/ClubMember'
          readOnly: true
        officers:
          type: string
          readOnly: true
      required:
      - can_join
      - created_at
      - description
      - id
      - institution
      - is_full
      - members
      - members_count
      - name
      - officers
      - officers_count
      - president
      - updated_at
      - user_membership
    ClubDetailRequest:
      type: object
      description: Serializer for club detail view with full information
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 200
        description:
          type: string
          minLength: 1
        institution:
          type: integer
        campus:
          type: integer
          nullable: true
        category:
          $ref: '#/components/schemas/CategoryEnum'
        logo:
          type: string
          format: binary
          nullable: true
        meeting_schedule:
          type: string
          nullable: true
          description: e.g., "Every Tuesday at 7 PM in Room 101"
          maxLength: 500
        contact_email:
          type: string
          format: email
          nullable: true
          maxLength: 254
        max_members:
          type: integer
          maximum: 9223372036854775807
          minimum: 1
          format: int64
          nullable: true
        is_public:
          type: boolean
        is_active:
          type: boolean
      required:
      - description
      - institution
      - name
    ClubList:
      type: object
      description: Serializer for club list view with basic information
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 200
        description:
          type: string
        institution:
          type: integer
        campus:
          type: integer
          nullable: true
        category:
          $ref: '#/components/schemas/CategoryEnum'
        president:
          allOf:
          - $ref: '#/components/schemas/UserBasic'
          readOnly: true
        logo:
          type: string
          format: uri
          nullable: true
        meeting_schedule:
          type: string
          nullable: true
          description: e.g., "Every Tuesday at 7 PM in Room 101"
          maxLength: 500
        contact_email:
          type: string
          format: email
          nullable: true
          maxLength: 254
        max_members:
          type: integer
          maximum: 9223372036854775807
          minimum: 1
          format: int64
          nullable: true
        is_public:
          type: boolean
        members_count:
          type: integer
          readOnly: true
        officers_count:
          type: integer
          readOnly: true
        is_full:
          type: boolean
          readOnly: true
        user_membership:
          type: string
          readOnly: true
        can_join:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        is_active:
          type: boolean
      required:
      - can_join
      - created_at
      - description
      - id
      - institution
      - is_full
      - members_count
      - name
      - officers_count
      - president
      - updated_at
      - user_membership
    ClubMember:
      type: object
      description: Serializer for club member information
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/UserBasic'
          readOnly: true
        role:
          $ref: '#/components/schemas/ClubMemberRoleEnum'
        joined_at:
          type: string
          format: date-time
          readOnly: true
        is_officer:
          type: boolean
          readOnly: true
        can_manage_club:
          type: boolean
          readOnly: true
        membership_duration:
          type: integer
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        is_active:
          type: boolean
      required:
      - can_manage_club
      - created_at
      - id
      - is_officer
      - joined_at
      - membership_duration
      - updated_at
      - user
    ClubMemberRequest:
      type: object
      description: Serializer for club member information
      properties:
        user_id:
          type: string
          format: uuid
          writeOnly: true
        role:
          $ref: '#/components/schemas/ClubMemberRoleEnum'
        is_active:
          type: boolean
    ClubMemberRoleEnum:
      enum:
      - member
      - officer
      - president
      type: string
      description: |-
        * `member` - Member
        * `officer` - Officer
        * `president` - President
    CourseCreate:
      type: object
      description: Serializer for creating courses
      properties:
        course_code:
          type: string
          description: Course code (e.g., CS 101, MATH 201)
          maxLength: 20
        course_name:
          type: string
          description: Full course name
          maxLength: 200
        semester:
          allOf:
          - $ref: '#/components/schemas/SemesterEnum'
          description: |-
            Academic semester

            * `fall` - Fall
            * `spring` - Spring
            * `summer` - Summer
            * `winter` - Winter
        year:
          type: integer
          maximum: 2030
          minimum: 2020
          description: Academic year
        description:
          type: string
          description: Course description and objectives
        max_enrollment:
          type: integer
          maximum: 9223372036854775807
          minimum: 1
          format: int64
          description: Maximum number of students
        enrollment_open:
          type: boolean
          description: Whether enrollment is currently open
      required:
      - course_code
      - course_name
      - semester
      - year
    CourseCreateRequest:
      type: object
      description: Serializer for creating courses
      properties:
        course_code:
          type: string
          minLength: 1
          description: Course code (e.g., CS 101, MATH 201)
          maxLength: 20
        course_name:
          type: string
          minLength: 1
          description: Full course name
          maxLength: 200
        semester:
          allOf:
          - $ref: '#/components/schemas/SemesterEnum'
          description: |-
            Academic semester

            * `fall` - Fall
            * `spring` - Spring
            * `summer` - Summer
            * `winter` - Winter
        year:
          type: integer
          maximum: 2030
          minimum: 2020
          description: Academic year
        instructor_id:
          type: integer
          writeOnly: true
        institution_id:
          type: integer
          writeOnly: true
        description:
          type: string
          description: Course description and objectives
        max_enrollment:
          type: integer
          maximum: 9223372036854775807
          minimum: 1
          format: int64
          description: Maximum number of students
        enrollment_open:
          type: boolean
          description: Whether enrollment is currently open
      required:
      - course_code
      - course_name
      - institution_id
      - instructor_id
      - semester
      - year
    CourseDetail:
      type: object
      description: Detailed serializer for course detail view
      properties:
        id:
          type: integer
          readOnly: true
        course_code:
          type: string
          description: Course code (e.g., CS 101, MATH 201)
          maxLength: 20
        course_name:
          type: string
          description: Full course name
          maxLength: 200
        semester:
          allOf:
          - $ref: '#/components/schemas/SemesterEnum'
          description: |-
            Academic semester

            * `fall` - Fall
            * `spring` - Spring
            * `summer` - Summer
            * `winter` - Winter
        year:
          type: integer
          maximum: 2030
          minimum: 2020
          description: Academic year
        semester_display:
          type: string
          readOnly: true
        instructor:
          allOf:
          - $ref: '#/components/schemas/CourseInstructor'
          readOnly: true
        institution:
          allOf:
          - $ref: '#/components/schemas/Institution'
          readOnly: true
        description:
          type: string
          description: Course description and objectives
        max_enrollment:
          type: integer
          maximum: 9223372036854775807
          minimum: 1
          format: int64
          description: Maximum number of students
        enrollment_count:
          type: integer
          readOnly: true
        study_groups_count:
          type: integer
          readOnly: true
        enrollment_open:
          type: boolean
          description: Whether enrollment is currently open
        is_active:
          type: boolean
          description: Whether the course is currently active
        is_enrolled:
          type: string
          readOnly: true
        user_role:
          type: string
          readOnly: true
        can_enroll:
          type: string
          readOnly: true
        enrolled_students:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - can_enroll
      - course_code
      - course_name
      - created_at
      - enrolled_students
      - enrollment_count
      - id
      - institution
      - instructor
      - is_enrolled
      - semester
      - semester_display
      - study_groups_count
      - updated_at
      - user_role
      - year
    CourseEnrollment:
      type: object
      description: Serializer for course enrollments
      properties:
        id:
          type: integer
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        course:
          allOf:
          - $ref: '#/components/schemas/CourseList'
          readOnly: true
        role:
          allOf:
          - $ref: '#/components/schemas/CourseEnrollmentRoleEnum'
          description: |-
            User's role in the course

            * `student` - Student
            * `ta` - Teaching Assistant
            * `instructor` - Instructor
        role_display:
          type: string
          readOnly: true
        enrollment_date:
          type: string
          format: date-time
          readOnly: true
          description: Date when enrollment was created
        is_active:
          type: boolean
          description: Whether enrollment is currently active
        grade:
          type: string
          description: Final grade (optional)
          maxLength: 5
        completion_date:
          type: string
          format: date-time
          nullable: true
          description: Date when course was completed
      required:
      - course
      - enrollment_date
      - id
      - role_display
      - user
    CourseEnrollmentRoleEnum:
      enum:
      - student
      - ta
      - instructor
      type: string
      description: |-
        * `student` - Student
        * `ta` - Teaching Assistant
        * `instructor` - Instructor
    CourseInstructor:
      type: object
      description: Simplified instructor serializer for course listings
      properties:
        id:
          type: integer
          readOnly: true
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        full_name:
          type: string
          readOnly: true
        email:
          type: string
          format: email
          maxLength: 254
        profile_picture:
          type: string
          format: uri
          nullable: true
      required:
      - email
      - full_name
      - id
    CourseList:
      type: object
      description: Serializer for course list view
      properties:
        id:
          type: integer
          readOnly: true
        course_code:
          type: string
          description: Course code (e.g., CS 101, MATH 201)
          maxLength: 20
        course_name:
          type: string
          description: Full course name
          maxLength: 200
        semester:
          allOf:
          - $ref: '#/components/schemas/SemesterEnum'
          description: |-
            Academic semester

            * `fall` - Fall
            * `spring` - Spring
            * `summer` - Summer
            * `winter` - Winter
        year:
          type: integer
          maximum: 2030
          minimum: 2020
          description: Academic year
        semester_display:
          type: string
          readOnly: true
        instructor:
          allOf:
          - $ref: '#/components/schemas/CourseInstructor'
          readOnly: true
        institution:
          allOf:
          - $ref: '#/components/schemas/Institution'
          readOnly: true
        description:
          type: string
          description: Course description and objectives
        max_enrollment:
          type: integer
          maximum: 9223372036854775807
          minimum: 1
          format: int64
          description: Maximum number of students
        enrollment_count:
          type: integer
          readOnly: true
        study_groups_count:
          type: integer
          readOnly: true
        enrollment_open:
          type: boolean
          description: Whether enrollment is currently open
        is_active:
          type: boolean
          description: Whether the course is currently active
        is_enrolled:
          type: string
          readOnly: true
        user_role:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - course_code
      - course_name
      - created_at
      - enrollment_count
      - id
      - institution
      - instructor
      - is_enrolled
      - semester
      - semester_display
      - study_groups_count
      - updated_at
      - user_role
      - year
    DirectMessage:
      type: object
      description: Serializer for direct messages
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        sender:
          allOf:
          - $ref: '#/components/schemas/UserBasic'
          readOnly: true
        recipient:
          allOf:
          - $ref: '#/components/schemas/UserBasic'
          readOnly: true
        content:
          type: string
        is_read:
          type: boolean
          readOnly: true
        read_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/MessageAttachment'
          readOnly: true
        conversation_partner:
          type: string
          readOnly: true
        formatted_created_at:
          type: string
          readOnly: true
      required:
      - attachments
      - content
      - conversation_partner
      - created_at
      - formatted_created_at
      - id
      - is_read
      - read_at
      - recipient
      - sender
      - updated_at
    DirectMessageRequest:
      type: object
      description: Serializer for direct messages
      properties:
        recipient_id:
          type: integer
          writeOnly: true
        content:
          type: string
          minLength: 1
      required:
      - content
      - recipient_id
    EventAttendee:
      type: object
      description: Serializer for event attendee information
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/UserBasic'
          readOnly: true
        status:
          $ref: '#/components/schemas/StatusEnum'
        registered_at:
          type: string
          format: date-time
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        is_active:
          type: boolean
      required:
      - created_at
      - id
      - registered_at
      - updated_at
      - user
    EventAttendeeRequest:
      type: object
      description: Serializer for event attendee information
      properties:
        user_id:
          type: string
          format: uuid
          writeOnly: true
        status:
          $ref: '#/components/schemas/StatusEnum'
        is_active:
          type: boolean
    EventCreateUpdate:
      type: object
      description: Serializer for creating and updating events
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          maxLength: 200
        description:
          type: string
        start_datetime:
          type: string
          format: date-time
        end_datetime:
          type: string
          format: date-time
        location:
          type: string
          maxLength: 200
        event_type:
          $ref: '#/components/schemas/EventTypeEnum'
        is_public:
          type: boolean
        max_attendees:
          type: integer
          maximum: 9223372036854775807
          minimum: 1
          format: int64
          nullable: true
        registration_required:
          type: boolean
        cover_image:
          type: string
          format: uri
          nullable: true
        institution:
          type: integer
        campus:
          type: integer
          nullable: true
        tags: {}
        is_active:
          type: boolean
      required:
      - description
      - end_datetime
      - id
      - institution
      - location
      - start_datetime
      - title
    EventCreateUpdateRequest:
      type: object
      description: Serializer for creating and updating events
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
        description:
          type: string
          minLength: 1
        start_datetime:
          type: string
          format: date-time
        end_datetime:
          type: string
          format: date-time
        location:
          type: string
          minLength: 1
          maxLength: 200
        event_type:
          $ref: '#/components/schemas/EventTypeEnum'
        is_public:
          type: boolean
        max_attendees:
          type: integer
          maximum: 9223372036854775807
          minimum: 1
          format: int64
          nullable: true
        registration_required:
          type: boolean
        cover_image:
          type: string
          format: binary
          nullable: true
        institution:
          type: integer
        campus:
          type: integer
          nullable: true
        tags: {}
        is_active:
          type: boolean
      required:
      - description
      - end_datetime
      - institution
      - location
      - start_datetime
      - title
    EventDetail:
      type: object
      description: Serializer for event detail view with full information
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          maxLength: 200
        description:
          type: string
        organizer:
          allOf:
          - $ref: '#/components/schemas/UserBasic'
          readOnly: true
        start_datetime:
          type: string
          format: date-time
        end_datetime:
          type: string
          format: date-time
        location:
          type: string
          maxLength: 200
        event_type:
          $ref: '#/components/schemas/EventTypeEnum'
        is_public:
          type: boolean
        max_attendees:
          type: integer
          maximum: 9223372036854775807
          minimum: 1
          format: int64
          nullable: true
        registration_required:
          type: boolean
        cover_image:
          type: string
          format: uri
          nullable: true
        institution:
          type: integer
        campus:
          type: integer
          nullable: true
        tags: {}
        attendees_count:
          type: integer
          readOnly: true
        interested_count:
          type: integer
          readOnly: true
        is_upcoming:
          type: boolean
          readOnly: true
        is_ongoing:
          type: boolean
          readOnly: true
        is_past:
          type: boolean
          readOnly: true
        is_full:
          type: boolean
          readOnly: true
        duration:
          type: number
          format: double
          readOnly: true
        user_attendance:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        is_active:
          type: boolean
        attendees:
          type: array
          items:
            $ref: '#/components/schemas/EventAttendee'
          readOnly: true
        can_register:
          type: string
          readOnly: true
      required:
      - attendees
      - attendees_count
      - can_register
      - created_at
      - description
      - duration
      - end_datetime
      - id
      - institution
      - interested_count
      - is_full
      - is_ongoing
      - is_past
      - is_upcoming
      - location
      - organizer
      - start_datetime
      - title
      - updated_at
      - user_attendance
    EventDetailRequest:
      type: object
      description: Serializer for event detail view with full information
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
        description:
          type: string
          minLength: 1
        start_datetime:
          type: string
          format: date-time
        end_datetime:
          type: string
          format: date-time
        location:
          type: string
          minLength: 1
          maxLength: 200
        event_type:
          $ref: '#/components/schemas/EventTypeEnum'
        is_public:
          type: boolean
        max_attendees:
          type: integer
          maximum: 9223372036854775807
          minimum: 1
          format: int64
          nullable: true
        registration_required:
          type: boolean
        cover_image:
          type: string
          format: binary
          nullable: true
        institution:
          type: integer
        campus:
          type: integer
          nullable: true
        tags: {}
        is_active:
          type: boolean
      required:
      - description
      - end_datetime
      - institution
      - location
      - start_datetime
      - title
    EventList:
      type: object
      description: Serializer for event list view with basic information
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          maxLength: 200
        description:
          type: string
        organizer:
          allOf:
          - $ref: '#/components/schemas/UserBasic'
          readOnly: true
        start_datetime:
          type: string
          format: date-time
        end_datetime:
          type: string
          format: date-time
        location:
          type: string
          maxLength: 200
        event_type:
          $ref: '#/components/schemas/EventTypeEnum'
        is_public:
          type: boolean
        max_attendees:
          type: integer
          maximum: 9223372036854775807
          minimum: 1
          format: int64
          nullable: true
        registration_required:
          type: boolean
        cover_image:
          type: string
          format: uri
          nullable: true
        institution:
          type: integer
        campus:
          type: integer
          nullable: true
        tags: {}
        attendees_count:
          type: integer
          readOnly: true
        interested_count:
          type: integer
          readOnly: true
        is_upcoming:
          type: boolean
          readOnly: true
        is_ongoing:
          type: boolean
          readOnly: true
        is_past:
          type: boolean
          readOnly: true
        is_full:
          type: boolean
          readOnly: true
        duration:
          type: number
          format: double
          readOnly: true
        user_attendance:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        is_active:
          type: boolean
      required:
      - attendees_count
      - created_at
      - description
      - duration
      - end_datetime
      - id
      - institution
      - interested_count
      - is_full
      - is_ongoing
      - is_past
      - is_upcoming
      - location
      - organizer
      - start_datetime
      - title
      - updated_at
      - user_attendance
    EventTypeEnum:
      enum:
      - academic
      - social
      - sports
      - career
      - cultural
      - service
      type: string
      description: |-
        * `academic` - Academic
        * `social` - Social
        * `sports` - Sports
        * `career` - Career
        * `cultural` - Cultural
        * `service` - Service
    FileTypeEnum:
      enum:
      - image
      - video
      - document
      - audio
      type: string
      description: |-
        * `image` - Image
        * `video` - Video
        * `document` - Document
        * `audio` - Audio
    GroupChat:
      type: object
      description: Serializer for group chats
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 100
        description:
          type: string
        creator:
          allOf:
          - $ref: '#/components/schemas/UserBasic'
          readOnly: true
        members:
          type: array
          items:
            $ref: '#/components/schemas/GroupChatMember'
          readOnly: true
        is_private:
          type: boolean
        is_active:
          type: boolean
        max_members:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        member_count:
          type: string
          readOnly: true
        admin_count:
          type: string
          readOnly: true
        last_message:
          type: string
          readOnly: true
        unread_count:
          type: string
          readOnly: true
        user_is_member:
          type: string
          readOnly: true
        user_is_admin:
          type: string
          readOnly: true
        can_add_members:
          type: string
          readOnly: true
      required:
      - admin_count
      - can_add_members
      - created_at
      - creator
      - id
      - last_message
      - member_count
      - members
      - name
      - unread_count
      - updated_at
      - user_is_admin
      - user_is_member
    GroupChatMember:
      type: object
      description: Serializer for group chat members
      properties:
        user:
          allOf:
          - $ref: '#/components/schemas/UserBasic'
          readOnly: true
        is_admin:
          type: boolean
        is_active:
          type: boolean
        joined_at:
          type: string
          format: date-time
          readOnly: true
        left_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_read_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - joined_at
      - last_read_at
      - left_at
      - user
    GroupChatMemberRequest:
      type: object
      description: Serializer for group chat members
      properties:
        is_admin:
          type: boolean
        is_active:
          type: boolean
    GroupChatRequest:
      type: object
      description: Serializer for group chats
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
        is_private:
          type: boolean
        is_active:
          type: boolean
        max_members:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
      required:
      - name
    GroupMessage:
      type: object
      description: Serializer for group messages
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        chat_id:
          type: string
          readOnly: true
        sender:
          allOf:
          - $ref: '#/components/schemas/UserBasic'
          readOnly: true
        content:
          type: string
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/MessageAttachment'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - attachments
      - chat_id
      - content
      - created_at
      - id
      - sender
      - updated_at
    GroupMessageRequest:
      type: object
      description: Serializer for group messages
      properties:
        content:
          type: string
          minLength: 1
      required:
      - content
    Institution:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 200
        domain:
          type: string
          description: Email domain for verification (e.g., university.edu)
          maxLength: 100
        logo:
          type: string
          format: uri
          nullable: true
      required:
      - domain
      - id
      - name
    MeetingFrequencyEnum:
      enum:
      - weekly
      - biweekly
      - monthly
      - irregular
      type: string
      description: |-
        * `weekly` - Weekly
        * `biweekly` - Bi-weekly
        * `monthly` - Monthly
        * `irregular` - Irregular
    MessageAttachment:
      type: object
      description: Serializer for message attachments
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        filename:
          type: string
          maxLength: 255
        file_type:
          $ref: '#/components/schemas/FileTypeEnum'
        file_size:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        file_size_display:
          type: string
          readOnly: true
        file_url:
          type: string
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - file_size
      - file_size_display
      - file_type
      - file_url
      - filename
      - id
    MessageAttachmentRequest:
      type: object
      description: Serializer for message attachments
      properties:
        filename:
          type: string
          minLength: 1
          maxLength: 255
        file_type:
          $ref: '#/components/schemas/FileTypeEnum'
        file_size:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
      required:
      - file_size
      - file_type
      - filename
    Notification:
      type: object
      description: Serializer for notifications
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        type:
          $ref: '#/components/schemas/TypeEnum'
        title:
          type: string
          maxLength: 200
        content:
          type: string
        actor:
          allOf:
          - $ref: '#/components/schemas/UserBasic'
          readOnly: true
        is_read:
          type: boolean
        read_at:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        target_object_data:
          type: string
          readOnly: true
        target_url:
          type: string
          readOnly: true
        formatted_created_at:
          type: string
          readOnly: true
        time_ago:
          type: string
          readOnly: true
      required:
      - actor
      - content
      - created_at
      - formatted_created_at
      - id
      - target_object_data
      - target_url
      - time_ago
      - title
      - type
    NotificationRequest:
      type: object
      description: Serializer for notifications
      properties:
        type:
          $ref: '#/components/schemas/TypeEnum'
        title:
          type: string
          minLength: 1
          maxLength: 200
        content:
          type: string
          minLength: 1
        is_read:
          type: boolean
        read_at:
          type: string
          format: date-time
          nullable: true
      required:
      - content
      - title
      - type
    PaginatedDirectMessageList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/DirectMessage'
    PaginatedGroupChatList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/GroupChat'
    PaginatedGroupMessageList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/GroupMessage'
    PaginatedNotificationList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Notification'
    PatchedChangePasswordRequest:
      type: object
      properties:
        old_password:
          type: string
          writeOnly: true
          minLength: 1
        new_password:
          type: string
          writeOnly: true
          minLength: 1
        new_password_confirm:
          type: string
          writeOnly: true
          minLength: 1
    PatchedClubCreateUpdateRequest:
      type: object
      description: Serializer for creating and updating clubs
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 200
        description:
          type: string
          minLength: 1
        institution:
          type: integer
        campus:
          type: integer
          nullable: true
        category:
          $ref: '#/components/schemas/CategoryEnum'
        logo:
          type: string
          format: binary
          nullable: true
        meeting_schedule:
          type: string
          nullable: true
          description: e.g., "Every Tuesday at 7 PM in Room 101"
          maxLength: 500
        contact_email:
          type: string
          format: email
          nullable: true
          maxLength: 254
        max_members:
          type: integer
          maximum: 9223372036854775807
          minimum: 1
          format: int64
          nullable: true
        is_public:
          type: boolean
        is_active:
          type: boolean
    PatchedDirectMessageRequest:
      type: object
      description: Serializer for direct messages
      properties:
        recipient_id:
          type: integer
          writeOnly: true
        content:
          type: string
          minLength: 1
    PatchedEventCreateUpdateRequest:
      type: object
      description: Serializer for creating and updating events
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
        description:
          type: string
          minLength: 1
        start_datetime:
          type: string
          format: date-time
        end_datetime:
          type: string
          format: date-time
        location:
          type: string
          minLength: 1
          maxLength: 200
        event_type:
          $ref: '#/components/schemas/EventTypeEnum'
        is_public:
          type: boolean
        max_attendees:
          type: integer
          maximum: 9223372036854775807
          minimum: 1
          format: int64
          nullable: true
        registration_required:
          type: boolean
        cover_image:
          type: string
          format: binary
          nullable: true
        institution:
          type: integer
        campus:
          type: integer
          nullable: true
        tags: {}
        is_active:
          type: boolean
    PatchedGroupChatRequest:
      type: object
      description: Serializer for group chats
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
        is_private:
          type: boolean
        is_active:
          type: boolean
        max_members:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
    PatchedGroupMessageRequest:
      type: object
      description: Serializer for group messages
      properties:
        content:
          type: string
          minLength: 1
    PatchedNotificationRequest:
      type: object
      description: Serializer for notifications
      properties:
        type:
          $ref: '#/components/schemas/TypeEnum'
        title:
          type: string
          minLength: 1
          maxLength: 200
        content:
          type: string
          minLength: 1
        is_read:
          type: boolean
        read_at:
          type: string
          format: date-time
          nullable: true
    PrivacyLevelEnum:
      enum:
      - public
      - friends
      - private
      type: string
      description: |-
        * `public` - Public
        * `friends` - Friends Only
        * `private` - Private
    SemesterEnum:
      enum:
      - fall
      - spring
      - summer
      - winter
      type: string
      description: |-
        * `fall` - Fall
        * `spring` - Spring
        * `summer` - Summer
        * `winter` - Winter
    StatusEnum:
      enum:
      - going
      - interested
      - not_going
      type: string
      description: |-
        * `going` - Going
        * `interested` - Interested
        * `not_going` - Not Going
    StudyGroupCreate:
      type: object
      description: Serializer for creating study groups
      properties:
        name:
          type: string
          description: Name of the study group
          maxLength: 200
        description:
          type: string
          description: Description of the study group's purpose and goals
        max_members:
          type: integer
          maximum: 50
          minimum: 2
          description: Maximum number of members allowed
        is_private:
          type: boolean
          description: Whether group requires approval to join
        meeting_location:
          type: string
          description: Regular meeting location
          maxLength: 200
        meeting_time:
          type: string
          format: date-time
          nullable: true
          description: Regular meeting time
        meeting_frequency:
          allOf:
          - $ref: '#/components/schemas/MeetingFrequencyEnum'
          description: |-
            How often the group meets

            * `weekly` - Weekly
            * `biweekly` - Bi-weekly
            * `monthly` - Monthly
            * `irregular` - Irregular
      required:
      - description
      - name
    StudyGroupCreateRequest:
      type: object
      description: Serializer for creating study groups
      properties:
        name:
          type: string
          minLength: 1
          description: Name of the study group
          maxLength: 200
        description:
          type: string
          minLength: 1
          description: Description of the study group's purpose and goals
        course_id:
          type: integer
          writeOnly: true
          nullable: true
        max_members:
          type: integer
          maximum: 50
          minimum: 2
          description: Maximum number of members allowed
        is_private:
          type: boolean
          description: Whether group requires approval to join
        meeting_location:
          type: string
          description: Regular meeting location
          maxLength: 200
        meeting_time:
          type: string
          format: date-time
          nullable: true
          description: Regular meeting time
        meeting_frequency:
          allOf:
          - $ref: '#/components/schemas/MeetingFrequencyEnum'
          description: |-
            How often the group meets

            * `weekly` - Weekly
            * `biweekly` - Bi-weekly
            * `monthly` - Monthly
            * `irregular` - Irregular
      required:
      - description
      - name
    StudyGroupDetail:
      type: object
      description: Detailed serializer for study group detail view
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          description: Name of the study group
          maxLength: 200
        description:
          type: string
          description: Description of the study group's purpose and goals
        course:
          allOf:
          - $ref: '#/components/schemas/CourseDetail'
          readOnly: true
        creator:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        members:
          type: array
          items:
            $ref: '#/components/schemas/StudyGroupMember'
          readOnly: true
        max_members:
          type: integer
          maximum: 50
          minimum: 2
          description: Maximum number of members allowed
        member_count:
          type: integer
          readOnly: true
        is_private:
          type: boolean
          description: Whether group requires approval to join
        is_member:
          type: string
          readOnly: true
        can_join:
          type: string
          readOnly: true
        user_role:
          type: string
          readOnly: true
        is_moderator:
          type: string
          readOnly: true
        meeting_location:
          type: string
          description: Regular meeting location
          maxLength: 200
        meeting_time:
          type: string
          format: date-time
          nullable: true
          description: Regular meeting time
        meeting_frequency:
          allOf:
          - $ref: '#/components/schemas/MeetingFrequencyEnum'
          description: |-
            How often the group meets

            * `weekly` - Weekly
            * `biweekly` - Bi-weekly
            * `monthly` - Monthly
            * `irregular` - Irregular
        next_meeting:
          type: string
          readOnly: true
        is_active:
          type: boolean
          description: Whether the study group is currently active
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - can_join
      - course
      - created_at
      - creator
      - description
      - id
      - is_member
      - is_moderator
      - member_count
      - members
      - name
      - next_meeting
      - updated_at
      - user_role
    StudyGroupList:
      type: object
      description: Serializer for study group list view
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          description: Name of the study group
          maxLength: 200
        description:
          type: string
          description: Description of the study group's purpose and goals
        course:
          allOf:
          - $ref: '#/components/schemas/CourseList'
          readOnly: true
        creator:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        max_members:
          type: integer
          maximum: 50
          minimum: 2
          description: Maximum number of members allowed
        member_count:
          type: integer
          readOnly: true
        is_private:
          type: boolean
          description: Whether group requires approval to join
        is_member:
          type: string
          readOnly: true
        can_join:
          type: string
          readOnly: true
        user_role:
          type: string
          readOnly: true
        meeting_location:
          type: string
          description: Regular meeting location
          maxLength: 200
        meeting_time:
          type: string
          format: date-time
          nullable: true
          description: Regular meeting time
        meeting_frequency:
          allOf:
          - $ref: '#/components/schemas/MeetingFrequencyEnum'
          description: |-
            How often the group meets

            * `weekly` - Weekly
            * `biweekly` - Bi-weekly
            * `monthly` - Monthly
            * `irregular` - Irregular
        next_meeting:
          type: string
          readOnly: true
        is_active:
          type: boolean
          description: Whether the study group is currently active
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - can_join
      - course
      - created_at
      - creator
      - description
      - id
      - is_member
      - member_count
      - name
      - next_meeting
      - user_role
    StudyGroupMember:
      type: object
      description: Serializer for study group members
      properties:
        id:
          type: integer
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        role:
          allOf:
          - $ref: '#/components/schemas/StudyGroupMemberRoleEnum'
          description: |-
            Member's role in the group

            * `member` - Member
            * `moderator` - Moderator
        role_display:
          type: string
          readOnly: true
        joined_at:
          type: string
          format: date-time
          readOnly: true
          description: Date when user joined the group
        is_active:
          type: boolean
          description: Whether membership is currently active
        contributions:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
          description: Number of contributions/posts in group
        last_active:
          type: string
          format: date-time
          nullable: true
          description: Last time member was active in group
      required:
      - id
      - joined_at
      - role_display
      - user
    StudyGroupMemberRoleEnum:
      enum:
      - member
      - moderator
      type: string
      description: |-
        * `member` - Member
        * `moderator` - Moderator
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
      required:
      - access
    TokenRefreshRequest:
      type: object
      properties:
        refresh:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - refresh
    TypeEnum:
      enum:
      - like
      - comment
      - share
      - message
      - group_message
      - event
      - follow
      - mention
      - group_invite
      - system
      type: string
      description: |-
        * `like` - Like
        * `comment` - Comment
        * `share` - Share
        * `message` - Message
        * `group_message` - Group Message
        * `event` - Event
        * `follow` - Follow
        * `mention` - Mention
        * `group_invite` - Group Invite
        * `system` - System
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          maxLength: 254
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        profile_picture:
          type: string
          format: uri
          nullable: true
        bio:
          type: string
          maxLength: 500
        graduation_year:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
        major:
          type: string
          maxLength: 100
        is_verified:
          type: boolean
          readOnly: true
          description: Institutional verification status
        profile:
          allOf:
          - $ref: '#/components/schemas/UserProfile'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - email
      - id
      - is_verified
      - profile
      - username
    UserBasic:
      type: object
      description: Basic user serializer for nested representations
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          readOnly: true
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
        full_name:
          type: string
          readOnly: true
        email:
          type: string
          format: email
          readOnly: true
      required:
      - email
      - full_name
      - id
      - username
    UserBasicRequest:
      type: object
      description: Basic user serializer for nested relationships
      properties:
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
    UserProfile:
      type: object
      properties:
        institution:
          allOf:
          - $ref: '#/components/schemas/Institution'
          readOnly: true
        campus:
          allOf:
          - $ref: '#/components/schemas/Campus'
          readOnly: true
        student_id:
          type: string
          maxLength: 50
        role:
          $ref: '#/components/schemas/UserProfileRoleEnum'
        department:
          type: string
          maxLength: 100
        phone_number:
          type: string
          maxLength: 20
        dorm_building:
          type: string
          maxLength: 100
        room_number:
          type: string
          maxLength: 20
        privacy_level:
          $ref: '#/components/schemas/PrivacyLevelEnum'
      required:
      - campus
      - institution
      - student_id
    UserProfileRoleEnum:
      enum:
      - student
      - faculty
      - staff
      type: string
      description: |-
        * `student` - Student
        * `faculty` - Faculty
        * `staff` - Staff
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
